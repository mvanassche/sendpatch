#!/bin/bash

    cat << EOF
This is $(basename $0), version: 20150625.0955.

EOF

Usage ()
{
    cat << EOF 1>&2
Usage: $(basename $0) [OPTION]... [FILE]...
Submit patches per email.

  -h, --help     display this help and exit

Report $(basename $0) bugs to fni@xxx.com
Commit guidelines: <http://svn/mc/xxx/sendpatch/trunk/send-patch.html>
EOF
    exit 2
}

while true; do
    case "$1" in
        -h | --help) Usage ;;
        * ) break ;;
    esac
done
# now do something with $@

mailto="mc-reviews@xxx.com"
prefix="[PATCH]"
excludefileregexp=""

patchfileprefix=""
commitmsgfileprefix=""
emailfileprefix=""
asksubject="yes"
autocommit="ask"
autosendemail="ask"
autodeletetmpfiles="ask"
emailcommand='blat "$email" -to "$mailto" -subject "$prefix $subject" -server "mail" -f "John Doe <johndoe@example.com>" -charset UTF-8'

die () {
    printf "$(basename $0): $@\n" > /dev/stderr
    exit 2                              # an error occurred
}

cecho () {
    black="\e[30m"
    red="\e[31m"
    green="\e[32m"
    yellow="\e[33m"
    blue="\e[34m"
    magenta="\e[35m"
    cyan="\e[36m"
    white="\e[37m"

    BLACK="\e[1;30m"
    RED="\e[1;31m"
    GREEN="\e[1;32m"
    YELLOW="\e[1;33m"
    BLUE="\e[1;34m"
    MAGENTA="\e[1;35m"
    CYAN="\e[1;36m"
    WHITE="\e[1;37m"

    reset="\e[0m"

    color=${YELLOW}
    printf "$color$1$reset\n"
}

vcs_info () {
    local default="tfs"

    # recursively search for `.svn' directory
    while [[ (! ( -d .svn ) && ! ( -d .git )) && ( "$(pwd)" != "/" ) ]]; do
        cd ..
    done

    if [[ -d .svn ]]; then
        printf "svn\n"
    else # svn not found
        if [[ -d .git ]]; then
            printf "git\n"
        else # git not found
            printf "$default\n"
        fi
    fi

}

fixtfsbinaryfiles () {
    sed -r "s/^(.*): files differ$/Index: \1\n===================================================================\nCannot display: file marked as a binary type.\n===================================================================/"
}

ask () {
    while true; do
        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        # ask the question (without the need to press RET)
        printf "$1 ($prompt): "
        read -n 1 -r REPLY
        printf "\n" # just a final linefeed

        # default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        # check if the reply is valid
        case "$REPLY" in
            y*|Y*) return 0 ;;
            n*|N*) return 1 ;;
        esac
    done
}

tmpfile="/tmp/$(basename $0).$$"
trap "rm -f $tmpfile" EXIT SIGHUP SIGINT SIGQUIT SIGTERM

userconfig=~/.sendpatchrc
projectconfig=sendpatch.common
userprojectconfig=sendpatch.params

export vcs=$(vcs_info)
printf "VC backend: $vcs\n"

case $vcs in
    svn)
        VCS_STATUS="svn status --ignore-externals"
        ;;
    tfs)
        VCS_STATUS="tf status"
        ;;
    git)
        VCS_STATUS="git status"
        ;;
    *)
        die "VCS backend is not supported"
        ;;
esac

case $vcs in
    svn)
        [[ -d .svn ]] \
            || die "\`$(pwd)' is not the root directory of a working copy"
        ;;
    tfs)
        [[ -f $projectconfig ]] \
            || die "\`$(pwd)' is not the root directory of a working copy"
        ;;
    git)
        [[ -d .git ]] \
            || die "\`$(pwd)' is not the root directory of a working copy"
        ;;
esac

case $vcs in
    svn)
        url=$(svn info | grep -E "^URL")/
        ;;
    git)
        url=$(git config --get remote.origin.url)/
        ;;
    tfs)
        # get collection and project
        tf workfold > $tmpfile
        url=$(cat $tmpfile | grep -E "^(Collection| \\$/)" | sed "/^ \\$/{s/:.*//}")
        ;;
esac

[[ -f $userconfig ]] && . $userconfig
[[ -f $projectconfig ]] && . $projectconfig
[[ -f $userprojectconfig ]] && . $userprojectconfig

printf "$emailcommand" | grep "John Doe" \
    && die "Please fix the sender address in the email command"

: ${EDITOR:="emacsclient"}
which "${EDITOR%% *}" > /dev/null 2>&1 || die "editor not found"

cecho "\nChanged files (to be committed now):"
case $vcs in
    svn)
        ${VCS_STATUS} -u $@ | grep -E -v "^\? " | tee $tmpfile
        cat $tmpfile | cut -c 1-9 | grep -E "^M       \*" \
            && die "a newer revision exists on the server"
        cat $tmpfile | cut -c 1-9 | grep -E "^C" && die "conflicted item modification"
        ;;
    tfs)
        export rootdirwin=$(cygpath -w -l "$(pwd)")
        # printf "Root directory (in Windows format) : $rootdirwin\n"
        ${VCS_STATUS} $@ > $tmpfile
        # No idea why, but we can't directly pipe the output of `tf status'
        # command
        cat $tmpfile | grep -F -i "$rootdirwin" | tee $tmpfile.out
        mv $tmpfile.out $tmpfile
        ;;
    git)
        git diff --name-only HEAD > $tmpfile
        ;;
esac

case $vcs in
    svn)
        cecho "\nUntracked files:"
        ${VCS_STATUS} $@ | grep -E "^\? " | grep -v " 0.*-"
        ;;
    tfs)
        ;;
    git)
        cecho "\nUntracked files:"
        git ls-files --others --exclude-standard
        ;;
esac


[[ $(cat $tmpfile | wc -l) -gt 0 ]] \
    || die "no changes to send to the repository"

if [[ "$asksubject" != "no" ]]; then
    printf "\nSubject (short log): "
    read subject
fi

oldcounter=$(ls ${patchfileprefix}0???-*.patch 2> /dev/null | sort --reverse \
    | head -n 1 | sed "s/^${patchfileprefix}00*//" | cut -d "-" -f 1)
newcounterpadded=$(printf "%04d" "$(( oldcounter + 1 ))")
filename="$newcounterpadded-$(printf "$subject\n" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')"

patch=${patchfileprefix}${filename}.patch
commitmsg=${commitmsgfileprefix}${filename}.log
email=${emailfileprefix}${filename}.txt

makediff $@ > $patch.tmp
retval=$?

if [ $retval -eq 0 ]; then
    cat $patch.tmp | fixtfsbinaryfiles > $patch
    rm $patch.tmp
else
    rm $patch.tmp
    exit 2
fi

case $vcs in
    svn)
        if [[ -n "$excludefileregexp" ]]; then
            cat $patch |\
            awk -v pattern="^Index: .*$excludefileregexp" \
                'BEGIN {deleteline = 0;}
                 $0 ~ pattern {deleteline = 1; next;}
                 // && deleteline == 0 {print $0;}
                 /^Index: / && deleteline == 1 {print $0; deleteline = 0;}' \
            > $patch.excluded 2> /dev/null
        else
        # XXX if no exclude still want to do the index manipulation
            cp $patch $patch.excluded
        fi
        ;;
    tfs)
        if [[ -n "$excludefileregexp" ]]; then
            cat $patch |\
            awk -v pattern="^Index: .*$excludefileregexp" \
                'BEGIN {deleteline = 0;}
                 $0 ~ pattern {deleteline = 1; next;}
                 // && deleteline == 0 {print $0;}
                 /^Index: / && deleteline == 1 {print $0; deleteline = 0;}' \
            > $patch.excluded 2> /dev/null
        else
        # XXX if no exclude still want to do the index manipulation
            cp $patch $patch.excluded
        fi
        ;;
    git)
        if [[ -n "$excludefileregexp" ]]; then
            cat $patch |\
            awk -v pattern="^diff --git .*$excludefileregexp .*" \
                'BEGIN {deleteline = 0;}
                 $0 ~ pattern {deleteline = 1; next;}
                 // && deleteline == 0 {print $0;}
                 /^diff --git / && deleteline == 1 {print $0; deleteline = 0;}' \
            > $patch.excluded 2> /dev/null
        else
        # XXX if no exclude still want to do the index manipulation
            cp $patch $patch.excluded
        fi
        ;;
esac

# ask for commit message
cat <<EOF > $email
# Hey, Emacs! This is a -*- Diff -*- file
# Please enter the commit message for your changes.  Lines starting with '#'
# will be ignored...
# The FIRST LINE of the commit message should be a short description and should
# skip the full stop.  It will become the subject of the email.
EOF
case $vcs in
    svn)
        makelogparams="$*"
        ;;
    git)
        makelogparams="$*"
        ;;
    tfs)
        makelogparams="-f $patch"
        ;;
esac
{ printf "$subject\n"; makelog $makelogparams | sort | uniq; printf "\n---\n"; printf "$url\n\n"; \
  cat $patch.excluded; } >> $email
mv $patch.excluded $patch
printf "\nEdit commit log message and email to send to '$mailto'...\n"
$EDITOR $email
test $? -eq 0 || die "edit failed"

# remove comments from editable part
sed '0,/^---$/{/^#[^+].*$/d;}' < $email > $email.nocomment; mv $email.nocomment $email

# convert email into UTF-8
case "$(file --brief $email 2> /dev/null | sed 's/unified diff output, //')" in
    UTF-8*)
        ;;
    ASCII*)
        ;;
    ISO-8859*)
        printf "Character encoding of diff output: ISO-8859... Converting it to UTF-8...\n"
        cat $email | iconv -c -f ISO-8859-1 -t UTF-8 > $tmpfile
        mv $tmpfile $email
        ;;
    *)
        printf "Potential problems found in email file $email: $(file --brief $email)\n"
        ask "Continue?" || die "exiting..."
        ;;
esac
printf "Email:         $email\n"

sed '/^---$/,$d' < $email > $commitmsg

# get new subject for email (first line of log message)
head -n 1 $email > $tmpfile

# replace accented letters by their unaccented equivalent
case "$(file --brief $tmpfile 2> /dev/null)" in
    UTF-8*)
        subject="$(cat $tmpfile | iconv -c -f teeUTF-8 -t ISO-8859-1 | unaccent)"
        ;;
    ISO-8859*|ASCII*)
        subject="$(cat $tmpfile | unaccent)"
        ;;
    *)
        die "unknown character encoding: $(file --brief $tmpfile).  Did you put the subject as first line?"
        ;;
esac

printf "\n"
if [[ "$autocommit" = "ask" ]]; then
    ask "Commit?" && askcommit="yes" || askcommit="no"
fi

if [[ "$autocommit" = "yes" || "$askcommit" = "yes" ]]; then
    printf "Committing...\n"
    case $vcs in
        svn)
            svn commit --file $commitmsg $@
            ;;
        git)
            git commit -a -F $commitmsg --only $@
            ;;
        tfs)
            tf checkin /comment:@$commitmsg /noprompt $@
            ;;
    esac
    rc=$?
else
    printf "Nothing gets committed...\n"
    rc=0
fi
test $rc -eq 0 || die "commit failed"

printf "\n"
if [[ "$autosendemail" = "ask" ]]; then
    printf "Environment for sending email:\n"
    # print the email command
    printf "$emailcommand\n"
    [[ -f $userconfig ]] && grep "excludefileregexp" $userconfig
    [[ -f $projectconfig ]] && grep "excludefileregexp" $projectconfig
    [[ -f $userprojectconfig ]] && grep "excludefileregexp" $userprojectconfig
    ask "Send email?" && asksendemail="yes" || asksendemail="no"
fi

if [[ "$autosendemail" = "yes" || "$asksendemail" = "yes" ]]; then
    printf "Sending email...\n"
    eval "$emailcommand"
    rc=$?
else
    printf "Nothing gets sent...\n"
    rc=0
fi
test $rc -eq 0 || die "send email failed"

printf "\n"
if [[ "$autodeletetmpfiles" = "ask" ]]; then
    ask "Delete temp files?" && askdeletetmpfiles="yes" || askdeletetmpfiles="no"
fi

if [[ "$autodeletetmpfiles" = "yes" || "$askdeletetmpfiles" = "yes" ]]; then
    printf "Deleting temp files...\n"
    rm $patch $commitmsg $email
    rc=$?
else
    printf "Nothing gets deleted...\n"
    rc=0
fi
test $rc -eq 0 || die "delete temp files failed"

## sendpatch ends here
